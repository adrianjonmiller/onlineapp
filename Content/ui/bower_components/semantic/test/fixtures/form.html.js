(function() {
  this.ecoTemplates || (this.ecoTemplates = {});
  this.ecoTemplates["form.html"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('---\nlayout      : \'default\'\ncss         : \'form\'\n\ntitle       : \'Form Validation\'\ndescription : \'A form validation behavior checks user input data against a set of criteria before passing along the data to the server\'\ntype        : \'UI Behavior\'\n---\n\n<script src="/build/uncompressed/modules/behavior/form.js"></script>\n<script src="/javascript/validate-form.js"></script>\n\n');
      
        __out.push(this.partial('header'));
      
        __out.push('\n\n<div class="main container">\n\n  <div class="peek">\n    <div class="ui vertical pointing secondary menu">\n      <a class="active item">Usage</a>\n      <a class="item">Behavior</a>\n      <a class="item">Settings</a>\n    </div>\n  </div>\n\n  <h2 class="ui dividing header">Usage</h2>\n\n  <div class="example">\n    <h3 class="ui header">Basic Validation</h3>\n    <p>Form validation requires passing in a validation object with the rules required to validate your form.</p>\n    <div class="ui info message">\n      <i class="help icon"></i>A validation object includes a list of form elements, and rules to validate each against. Fields are matched by either the id tag, name tag, or data-validate metadata matching the identifier provided in the settings object. To pass parameters to a rule, use bracket notation\n    </div>\n    <div class="ignore code">\n    $(\'.ui.form\')\n      .form({\n        firstName: {\n          identifier  : \'first-name\',\n          rules: [\n            {\n              type   : \'empty\',\n              prompt : \'Please enter your first name\'\n            }\n          ]\n        },\n        lastName: {\n          identifier  : \'last-name\',\n          rules: [\n            {\n              type   : \'empty\',\n              prompt : \'Please enter your last name\'\n            }\n          ]\n        },\n        username: {\n          identifier : \'username\',\n          rules: [\n            {\n              type   : \'empty\',\n              prompt : \'Please enter a username\'\n            }\n          ]\n        },\n        password: {\n          identifier : \'password\',\n          rules: [\n            {\n              type   : \'empty\',\n              prompt : \'Please enter a password\'\n            },\n            {\n              type   : \'length[6]\',\n              prompt : \'Your password must be at least 6 characters\'\n            }\n          ]\n        }\n        terms: {\n          identifier : \'terms\',\n          rules: [\n            {\n              type   : \'checked\',\n              prompt : \'You must agree to the terms and conditions\'\n            }\n          ]\n        }\n      })\n    ;\n    </div>\n    <div class="ui form segment">\n      <p>Let\'s go ahead and get you signed up.</p>\n      <div class="two fields">\n        <div class="field">\n          <label>First Name</label>\n          <input placeholder="First Name" name="first-name" type="text">\n        </div>\n        <div class="field">\n          <label>Last Name</label>\n          <input placeholder="Last Name" name="last-name" type="text">\n        </div>\n      </div>\n      <div class="field">\n        <label>Username</label>\n        <input placeholder="Username" name="username" type="text">\n      </div>\n      <div class="field">\n        <label>Password</label>\n        <input type="password" name="password">\n      </div>\n      <div class="inline field">\n        <div class="ui checkbox">\n          <input type="checkbox" name="terms" />\n          <label>I agree to the terms and conditions</label>\n        </div>\n      </div>\n      <div class="ui blue submit button">Submit</div>\n    </div>\n  </div>\n\n  <div class="example">\n    <h3 class="ui header">Validation with Message</h3>\n    <p>Forms that contain a <a href="/elements/message.html">ui message</a> error block will automatically be filled in with form validation information.</p>\n    <div class="info message">The template for error messages can be modified by adjusting settings.template.error</div>\n\n    <div class="ui form segment">\n      <p>Let\'s go ahead and get you signed up.</p>\n      <div class="two fields">\n        <div class="field">\n          <label>First Name</label>\n          <input placeholder="First Name" name="first-name" type="text">\n        </div>\n        <div class="field">\n          <label>Last Name</label>\n          <input placeholder="Last Name" name="last-name" type="text">\n        </div>\n      </div>\n      <div class="field">\n        <label>Username</label>\n        <input placeholder="Username" name="username" type="text">\n      </div>\n      <div class="field">\n        <label>Password</label>\n        <input type="password" name="password">\n      </div>\n      <div class="inline field">\n        <div class="ui checkbox">\n          <input type="checkbox" name="terms" />\n          <label>I agree to the Terms and Conditions</label>\n        </div>\n      </div>\n      <div class="ui blue submit button">Submit</div>\n      <div class="ui error message"></div>\n    </div>\n  </div>\n  <div class="dog example">\n    <h3 class="ui header">Custom Validation</h3>\n    <p>Custom form validation requires passing in a validation object with the rules required to validate your form.</p>\n    <div class="ignore code">\n    $(\'.ui.form\')\n      .form({\n        dog: {\n          identifier: \'dog\',\n          rules: [\n            {\n              type: \'empty\',\n              prompt: \'You must have a dog to add\'\n            },\n            {\n              type: \'contains[fluffy]\',\n              prompt: \'I only want you to add fluffy dogs!\'\n            },\n            {\n              type: \'not[mean]\',\n              prompt: \'Why would you add a mean dog to the list?\'\n            }\n          ]\n        }\n      })\n    ;\n    </div>\n    <div class="ui form segment">\n      <p>Let\'s go ahead and get you signed up.</p>\n      <div class="field">\n        <label>Dog</label>\n        <input placeholder="Dog" name="dog" type="text">\n      </div>\n      <div class="ui blue submit button">Add Dog <i class="add icon"></i></div>\n      <div class="ui error message"></div>\n    </div>\n  </div>\n\n  <div class="inline example">\n    <h3 class="ui header">Inline Validation and Validation Events</h3>\n    <p>Validation messages can also appear inline. UI Forms automatically format <a href="/elements/label.html">labels</a> with the class name <code>prompt</code>. These validation prompts are also set to appear on input change instead of form submission.</p>\n    <p>This example also uses a different validation event. Each element will be validated on input blur instead of the default form submit.</p>\n    <div class="code" data-type="javascript">\n      $(\'.ui.dropdown\')\n        .form(validationRules, {\n          inline : true,\n          on     : \'blur\'\n        })\n      ;\n    </div>\n    <div class="ui form segment">\n      <p>Let\'s go ahead and get you signed up.</p>\n      <div class="two fields">\n        <div class="field">\n          <label>First Name</label>\n          <input placeholder="First Name" name="first-name" type="text">\n        </div>\n        <div class="field">\n          <label>Last Name</label>\n          <input placeholder="Last Name" name="last-name" type="text">\n        </div>\n      </div>\n      <div class="field">\n        <label>Username</label>\n        <input placeholder="Username" name="username" type="text">\n      </div>\n      <div class="field">\n        <label>Password</label>\n        <input type="password" name="password">\n      </div>\n      <div class="inline field">\n        <div class="ui checkbox">\n          <input type="checkbox" name="terms" />\n          <label>I agree to the Terms and Conditions</label>\n        </div>\n      </div>\n      <div class="ui blue submit button">Submit</div>\n    </div>\n  </div>\n\n  <h2 class="ui dividing header">Behavior</h2>\n\n  All the following <a href="/module.html#/behavior">behaviors</a> can be called using the syntax <code>$(\'.foo\').form(\'behavior name\', argumentOne, argumentTwo)</code>\n\n  <table class="ui definition celled table segment">\n    <tr>\n      <td>submit</td>\n      <td>Submits selected form</td>\n    </tr>\n    <tr>\n      <td>validate form</td>\n      <td>Validates form and calls onSuccess or onFailure</td>\n    </tr>\n    <tr>\n      <td>get change event</td>\n      <td>gets browser property change event</td>\n    </tr>\n    <tr>\n      <td>get field(id)</td>\n      <td>Returns element with matching name, id, or data-validate metadata to ID</td>\n    </tr>\n    <tr>\n      <td>get validation(element)</td>\n      <td>Returns validation rules for a given field</td>\n    </tr>\n    <tr>\n      <td>has field(identifier)</td>\n      <td>Returns whether a field exists</td>\n    </tr>\n    <tr>\n      <td>add errors(errors)</td>\n      <td>Adds errors to form, given an array errors</td>\n    </tr>\n  </table>\n\n  <h2 class="ui dividing header">Settings</h2>\n\n  <h3 class="ui header">\n    Form Settings\n    <div class="sub header">Form settings modify the form validation behavior</div>\n  </h3>\n\n  <table class="ui red celled sortable definition table segment">\n    <thead>\n      <th>Setting</th>\n      <th class="four wide">Default</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>keyboardShortcuts</td>\n        <td>true</td>\n        <td>Adds keyboard shortcuts for enter and escape keys to submit form and blur fields respectively</td>\n      </tr>\n      <tr>\n        <td>on</td>\n        <td>submit</td>\n        <td>Event used to trigger validation. Can be either <b>submit</b>, <b>blur</b> or <b>change</b>.</td>\n      </tr>\n      <tr>\n        <td>revalidate</td>\n        <td>true</td>\n        <td>If set to true will revalidate fields with errors on input change</td>\n      </tr>\n      <tr>\n        <td>delay</td>\n        <td>true</td>\n        <td>Delay from last typed letter to validate a field when using <code>on: change</code> or when revalidating a field.</td>\n      </tr>\n      <tr>\n        <td>inline</td>\n        <td>false</td>\n        <td>Adds inline error on field validation error</td>\n      </tr>\n      <tr>\n        <td>transition</td>\n        <td>\n          scale\n        </td>\n        <td>Named transition to use when animating validation errors. Fade and slide down are available without including <a href="/modules/transition.html">ui transitions</a></td>\n      </tr>\n      <tr>\n        <td>duration</td>\n        <td>150</td>\n        <td>Animation speed for inline prompt</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div class="ui horizontal divider"><i class="icon setting"></i></div>\n\n  <h3 class="ui header">\n    Validation Rules\n    <div class="sub header">Validation rules are a set of conditions required to validate a field</div>\n  </h3>\n  <div class="ui info message">Validation rules are found in <code>settings.rules</code>, to add new global validation rules, modify <code>$.fn.form.settings.rules</code> to include your function.</div>\n  <table class="ui teal celled sortable definition table segment">\n    <thead>\n      <th class="four wide">Name</th>\n      <th>Arguments</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>empty</td>\n        <td>value</td>\n        <td>Checks whether a field is empty</td>\n      </tr>\n      <tr>\n        <td>email</td>\n        <td>value</td>\n        <td>Checks whether a field is a valid email address</td>\n      </tr>\n      <tr>\n        <td>length</td>\n        <td>value</td>\n        <td>Checks whether a field is longer than a length</td>\n      </tr>\n      <tr>\n        <td>not</td>\n        <td>value, notValue</td>\n        <td>Checks whether a field is not a value</td>\n      </tr>\n      <tr>\n        <td>contains</td>\n        <td>value, text</td>\n        <td>Checks whether a field contains text</td>\n      </tr>\n      <tr>\n        <td>is</td>\n        <td>value, text</td>\n        <td>Checks whether a field matches a value</td>\n      </tr>\n      <tr>\n        <td>maxLength</td>\n        <td>value</td>\n        <td>Checks whether a field is less than a max length</td>\n      </tr>\n      <tr>\n        <td>match</td>\n        <td>value, fieldIdentifier</td>\n        <td>Checks whether a field matches another field</td>\n      </tr>\n      <tr>\n        <td>url</td>\n        <td>value</td>\n        <td>Checks whether a field is a url</td>\n      </tr>\n      <tr>\n        <td>checked</td>\n        <td>-</td>\n        <td>Checks whether a checkbox field is checked</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div class="ui horizontal divider"><i class="icon setting"></i></div>\n\n  <h3 class="ui header">\n    Callbacks\n    <div class="sub header">Callbacks specify a function to occur after a specific behavior.</div>\n  </h3>\n\n  <table class="ui celled green definition table segment">\n    <thead>\n      <th class="four wide">Setting</th>\n      <th>Context</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>onValid</td>\n        <td>field</td>\n        <td>Callback on each valid field</td>\n      </tr>\n      <tr>\n        <td>onInvalid</td>\n        <td>field</td>\n        <td>Callback on each invalid field</td>\n      </tr>\n      <tr>\n        <td>onSuccess</td>\n        <td>form</td>\n        <td>Callback if a form is all valid</td>\n      </tr>\n      <tr>\n        <td>onFailure</td>\n        <td>form</td>\n        <td>Callback if any form field is invalid</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div class="ui horizontal divider"><i class="icon setting"></i></div>\n\n  <h3 class="ui header">\n    Templates\n    <div class="sub header">Templates are used to construct elements</div>\n  </h3>\n  <div class="ui info message">Templates are found in <code>settings.template</code>, to modify templates across all forms, modify <code>$.fn.form.settings.templates</code> to include your function. They must return html.</div>\n  <table class="ui celled blue definition table segment">\n    <thead>\n      <th class="four wide">Template</th>\n      <th>Arguments</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>error</td>\n        <td>Errors (Array)</td>\n        <td>Constructs the contents of an error message</td>\n      </tr>\n      <tr>\n        <td>prompt</td>\n        <td>Errors (Array)</td>\n        <td>Constructs an element to prompt the user to an invalid field</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div class="ui horizontal divider"><i class="icon setting"></i></div>\n\n  <h3 class="ui header">\n    DOM Settings\n    <div class="sub header">DOM settings specify how this module should interface with the DOM</div>\n  </h3>\n  <table class="ui celled purple definition table segment">\n    <thead>\n      <th>Setting</th>\n      <th class="six wide">Default</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>namespace</td>\n        <td>form</td>\n        <td>Event namespace. Makes sure module teardown does not effect other events attached to an element.</td>\n      </tr>\n      <tr>\n        <td>selector</td>\n        <td>\n          <div class="code">\n    selector : {\n      message   : \'.error.message\',\n      field     : \'input, textarea, select\',\n      group     : \'.field\',\n      input     : \'input\',\n      prompt    : \'.prompt\',\n      submit    : \'.submit\'\n    }\n          </div>\n        </td>\n        <td>Selectors used to match functionality to DOM</td>\n      </tr>\n      <tr>\n        <td>metadata</td>\n        <td>\n          <div class="code">\n\n    metadata : {\n      validate: \'validate\'\n    },\n          </div>\n        </td>\n        <td>\n        HTML5 metadata attributes\n        </td>\n      </tr>\n      <tr>\n        <td>className</td>\n        <td>\n          <div class="code">\n    className : {\n      active      : \'active\',\n      placeholder : \'default\',\n      disabled    : \'disabled\',\n      visible     : \'visible\'\n    }\n          </div>\n        </td>\n        <td>Class names used to attach style to state</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div class="ui horizontal divider"><i class="icon setting"></i></div>\n\n  <h3 class="ui header">\n    Debug Settings\n    <div class="sub header">Debug settings controls debug output to the console</div>\n  </h3>\n\n  <table class="ui blue celled sortable definition table segment">\n    <thead>\n      <th>Setting</th>\n      <th class="four wide">Default</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>name</td>\n        <td>Form</td>\n        <td>Name used in debug logs</td>\n      </tr>\n      <tr>\n        <td>debug</td>\n        <td>True</td>\n        <td>Provides standard debug output to console</td>\n      </tr>\n      <tr>\n        <td>performance</td>\n        <td>True</td>\n        <td>Provides standard debug output to console</td>\n      </tr>\n      <tr>\n        <td>verbose</td>\n        <td>True</td>\n        <td>Provides ancillary debug output to console</td>\n      </tr>\n      <tr>\n        <td>errors</td>\n        <td colspan="2">\n          <div class="code">\n    errors   : {\n      method   : \'The method you called is not defined.\'\n    }\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n</div>\n');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
