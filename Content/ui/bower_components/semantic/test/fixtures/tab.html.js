(function() {
  this.ecoTemplates || (this.ecoTemplates = {});
  this.ecoTemplates["tab.html"] = function(__obj) {
    if (!__obj) __obj = {};
    var __out = [], __capture = function(callback) {
      var out = __out, result;
      __out = [];
      callback.call(this);
      result = __out.join('');
      __out = out;
      return __safe(result);
    }, __sanitize = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else if (typeof value !== 'undefined' && value != null) {
        return __escape(value);
      } else {
        return '';
      }
    }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;
    __safe = __obj.safe = function(value) {
      if (value && value.ecoSafe) {
        return value;
      } else {
        if (!(typeof value !== 'undefined' && value != null)) value = '';
        var result = new String(value);
        result.ecoSafe = true;
        return result;
      }
    };
    if (!__escape) {
      __escape = __obj.escape = function(value) {
        return ('' + value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;');
      };
    }
    (function() {
      (function() {
      
        __out.push('---\nlayout      : \'default\'\ncss         : \'side\'\n\ntitle       : \'Tab\'\ndescription : \'A tab is a section of content tied to a navigation menu\'\ntype        : \'UI Module\'\n---\n\n<script src="/javascript/tab.js"></script>\n\n');
      
        __out.push(this.partial('header'));
      
        __out.push('\n\n<div class="main container">\n\n  <div class="peek">\n    <div class="ui vertical pointing secondary menu">\n      <a class="item">Examples</a>\n      <a class="item">Coupling</a>\n      <a class="item">Behavior</a>\n      <a class="item">Settings</a>\n    </div>\n  </div>\n\n  <h2 class="ui dividing header">Examples</h2>\n\n  <div class="first no example">\n\n    <h4 class="ui header">Opening tabs with menus</h4>\n    <p>Tabs are usually used in concert with an element that activates the tab. When using tabs, unlike other UI components, the menu or activating element is initialized instead of the tab.</p>\n    <p>Tabs are connected to their activators with a metadata attribute <code>data-tab</code>. This should be added to both the activating element and the tab itself.</p>\n\n    <div class="ignored ui info message">\n      <h4 class="ui header">Default tabs</h4>\n      <p>After any tab is opened it will look for a default tab to open inside of the current tab. This is the first tab that begins with the same stem url as the parent tab. For example a tab with the path <code>data-tab="home"</code> might open a tab automatically <code>data-tab="/home/inbox"</code>.</p>\n      <p>This will happen recursively for every tab open, allowing as many levels of tabs as you like</p>\n    </div>\n\n    <div class="code" data-type="javascript">\n    $(\'.first.example .menu .item\')\n      .tab({\n        context: \'.first.example\'\n      })\n    ;\n    </div>\n\n    <div class="code" data-type="html" data-label="true">\n    <div class="ui pointing secondary menu">\n      <a class="active item" data-tab="first">First</a>\n      <a class="item" data-tab="second">Second</a>\n      <a class="item" data-tab="third">Third</a>\n    </div>\n    <div class="ui active tab segment" data-tab="first">\n      <div class="ui top attached tabular menu">\n        <a class="active item" data-tab="first/a">1A</a>\n        <a class="item" data-tab="first/b">1B</a>\n        <a class="item" data-tab="first/c">1C</a>\n      </div>\n      <div class="ui bottom attached active tab segment" data-tab="first/a">1A</div>\n      <div class="ui bottom attached tab segment" data-tab="first/b">1B</div>\n      <div class="ui bottom attached tab segment" data-tab="first/c">1C</div>\n    </div>\n    <div class="ui tab segment" data-tab="second">...</div>\n    <div class="ui tab segment" data-tab="third">...</div>\n    </div>\n\n    <div class="ui pointing secondary menu">\n      <a class="active item" data-tab="first">First</a>\n      <a class="item" data-tab="second">Second</a>\n      <a class="item" data-tab="third">Third</a>\n    </div>\n    <div class="ui active tab segment" data-tab="first">\n      <div class="ui top attached tabular menu">\n        <a class="active item" data-tab="first/a">1A</a>\n        <a class="item" data-tab="first/b">1B</a>\n        <a class="item" data-tab="first/c">1C</a>\n      </div>\n      <div class="ui bottom attached active tab segment" data-tab="first/a">1A</div>\n      <div class="ui bottom attached tab segment" data-tab="first/b">1B</div>\n      <div class="ui bottom attached tab segment" data-tab="first/c">1C</div>\n    </div>\n    <div class="ui tab segment" data-tab="second">\n      <div class="ui top attached tabular menu">\n        <a class="item" data-tab="second/a">2A</a>\n        <a class="item" data-tab="second/b">2B</a>\n        <a class="item" data-tab="second/c">2C</a>\n      </div>\n      <div class="ui bottom attached tab segment" data-tab="second/a">2A</div>\n      <div class="ui bottom attached tab segment" data-tab="second/b">2B</div>\n      <div class="ui bottom attached tab segment" data-tab="second/c">2C</div>\n    </div>\n    <div class="ui tab segment" data-tab="third">\n      <div class="ui top attached tabular menu">\n        <a class="item" data-tab="third/a">3A</a>\n        <a class="item" data-tab="third/b">3B</a>\n        <a class="item" data-tab="third/c">3C</a>\n      </div>\n      <div class="ui bottom attached tab segment" data-tab="third/a">3A</div>\n      <div class="ui bottom attached tab segment" data-tab="third/b">3B</div>\n      <div class="ui bottom attached tab segment" data-tab="third/c">3C</div>\n    </div>\n  </div>\n\n  <h2 class="ui dividing header">Optional Coupling</h2>\n\n  <div class="history no example">\n    <h4 class="ui header">Managing History with Tabs</h4>\n    <p>Tabs can attach to a history change event to allow for tabs to maintain history events. Tabs use Asual\'s <a href="https://github.com/asual/jquery-address">Address library</a> to provide cross-browser push state support. This makes sure in browser that don\'t support push state, <code>hashchange</code> is used with in page anchors to provide history functionality.</p>\n    <div class="ignored ui warning message">\n      <h4 class="header">Setup Paths</h4>\n      Make sure when you use history to specify the path. This is required for determining the stem url from the part of the url maintaining in page history. The path is the URL without any tabs open. This cannot usually be set automatically because on future page refreshes the URL may include an internal link. Using the incorrect path will cause the module to work incorrectly, producing unexpected results.\n    </div>\n    <div class="ignored ui red message">\n      <h4 class="header">Route your URLs</h4>\n      Be sure to set up routes on your server for any url used with history. If you use history to change the url to a location that does not exist, it will 404 on the next refresh. The docs for example, are static github hosted pages, so will 404 if the page url changes\n    </div>\n    <div class="code" data-type="javascript">\n      $(\'.history.example .menu .item\')\n        .tab({\n          context : \'.history.example\',\n          history : true,\n          path    : \'/modules/tab.html\'\n        })\n      ;\n    </div>\n    <div class="ui pointing secondary menu">\n      <a class="active item" data-tab="first">First</a>\n      <a class="item" data-tab="second">Second</a>\n      <a class="item" data-tab="third">Third</a>\n    </div>\n    <div class="ui active tab segment" data-tab="first">\n      <div class="ui top attached tabular menu">\n        <a class="active item" data-tab="first/a">1A</a>\n        <a class="item" data-tab="first/b">1B</a>\n        <a class="item" data-tab="first/c">1C</a>\n      </div>\n      <div class="ui bottom attached active tab segment" data-tab="first/a">1A</div>\n      <div class="ui bottom attached tab segment" data-tab="first/b">1B</div>\n      <div class="ui bottom attached tab segment" data-tab="first/c">1C</div>\n    </div>\n    <div class="ui tab segment" data-tab="second">\n      <div class="ui top attached tabular menu">\n        <a class="item" data-tab="second/a">2A</a>\n        <a class="item" data-tab="second/b">2B</a>\n        <a class="item" data-tab="second/c">2C</a>\n      </div>\n      <div class="ui bottom attached tab segment" data-tab="second/a">2A</div>\n      <div class="ui bottom attached tab segment" data-tab="second/b">2B</div>\n      <div class="ui bottom attached tab segment" data-tab="second/c">2C</div>\n    </div>\n    <div class="ui tab segment" data-tab="third">\n      <div class="ui top attached tabular menu">\n        <a class="item" data-tab="third/a">3A</a>\n        <a class="item" data-tab="third/b">3B</a>\n        <a class="item" data-tab="third/c">3C</a>\n      </div>\n      <div class="ui bottom attached tab segment" data-tab="third/a">3A</div>\n      <div class="ui bottom attached tab segment" data-tab="third/b">3B</div>\n      <div class="ui bottom attached tab segment" data-tab="third/c">3C</div>\n    </div>\n  </div>\n\n  <div class="dynamic no example">\n    <h4 class="header">Retreiving Dynamic Tab Content</h4>\n    <p>The easiest way to setup dynamic content is to use the parameter <code>auto</code>, this will automatically retrieve content at a remote url matching the url set in the browser. The URL will receive an addition HTTP Header <code>\'X-Remote\': true</code>. You can use this on your server\'s back-end to determine whether a request is an AJAX request from a tab</p>\n    <p>This uses a similar technique to <a href="https://github.com/defunkt/jquery-pjax">pJax</a> or Rail\'s <a href="https://github.com/rails/turbolinks/">turbolinks</a>.</p>\n\n    <div class="ignored ui info message">There are a variety of settings for configuring dynamic content behavior. Visit the tab settings section for more information</div>\n\n    <div class="code" data-type="javascript">\n    $(\'.dynamic.example .menu .item\')\n      .tab({\n        context : \'.dynamic.example\',\n        auto    : true,\n        path    : \'/modules/tab.html\'\n      })\n    ;\n    </div>\n    <div class="ui pointing secondary menu">\n      <a class="active item" data-tab="first">First</a>\n      <a class="item" data-tab="second">Second</a>\n      <a class="item" data-tab="third">Third</a>\n    </div>\n    <div class="ui active tab segment" data-tab="first">\n      <div class="ui top attached tabular menu">\n        <a class="active item" data-tab="first/a">1A</a>\n        <a class="item" data-tab="first/b">1B</a>\n        <a class="item" data-tab="first/c">1C</a>\n      </div>\n      <div class="ui bottom attached active tab segment" data-tab="first/a"></div>\n      <div class="ui bottom attached tab segment" data-tab="first/b"></div>\n      <div class="ui bottom attached tab segment" data-tab="first/c"></div>\n    </div>\n    <div class="ui tab segment" data-tab="second">\n      <div class="ui top attached tabular menu">\n        <a class="item" data-tab="second/a">2A</a>\n        <a class="item" data-tab="second/b">2B</a>\n        <a class="item" data-tab="second/c">2C</a>\n      </div>\n      <div class="ui bottom attached tab segment" data-tab="second/a"></div>\n      <div class="ui bottom attached tab segment" data-tab="second/b"></div>\n      <div class="ui bottom attached tab segment" data-tab="second/c"></div>\n    </div>\n    <div class="ui tab segment" data-tab="third">\n      <div class="ui top attached tabular menu">\n        <a class="item" data-tab="third/a">3A</a>\n        <a class="item" data-tab="third/b">3B</a>\n        <a class="item" data-tab="third/c">3C</a>\n      </div>\n      <div class="ui bottom attached tab segment" data-tab="third/a"></div>\n      <div class="ui bottom attached tab segment" data-tab="third/b"></div>\n      <div class="ui bottom attached tab segment" data-tab="third/c"></div>\n    </div>\n  </div>\n\n  <h2 class="ui dividing header">Behavior</h2>\n\n  All the following <a href="/module.html#/behavior">behaviors</a> can be called using the syntax <code>$(\'.foo\').tab(\'behavior name\', argumentOne, argumentTwo)</code>\n\n  <table class="ui definition celled table segment">\n    <tr>\n      <td>attach events(selector, event)</td>\n      <td>Attaches tab action to given selector. Default event if none specified is toggle</td>\n    </tr>\n    <tr>\n      <td>show</td>\n      <td>Shows tab</td>\n    </tr>\n    <tr>\n      <td>hide</td>\n      <td>Hides tab</td>\n    </tr>\n    <tr>\n      <td>toggle</td>\n      <td>Toggles visibility of tab</td>\n    </tr>\n    <tr>\n      <td>is open</td>\n      <td>Returns whether tab is open</td>\n    </tr>\n    <tr>\n      <td>is closed</td>\n      <td>Returns whether tab is closed</td>\n    </tr>\n    <tr>\n      <td>push page</td>\n      <td>Pushes page content to be visible alongside tab</td>\n    </tr>\n    <tr>\n      <td>get direction</td>\n      <td>Returns direction of current tab</td>\n    </tr>\n    <tr>\n      <td>pull page</td>\n      <td>Returns page content to original position</td>\n    </tr>\n    <tr>\n      <td>add body css</td>\n      <td>Adds stylesheet to page head to trigger tab animations</td>\n    </tr>\n    <tr>\n      <td>remove body css</td>\n      <td>Removes any inline stylesheets for tab animation</td>\n    </tr>\n    <tr>\n      <td>get transition event</td>\n      <td>Returns vendor prefixed transition end event</td>\n    </tr>\n  </table>\n\n  <h2 class="ui dividing header">Settings</h2>\n\n  <h3 class="ui header">\n    Transition Settings\n    <div class="sub header">Form settings modify the transition behavior</div>\n  </h3>\n  <table class="ui red celled sortable definition table segment">\n    <thead>\n      <th>Setting</th>\n      <th class="four wide">Default</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>overlay</td>\n        <td>false</td>\n        <td>Whether tab should overlay page instead of pushing page to the side</td>\n      </tr>\n      <tr>\n        <td>useCSS</td>\n        <td>true</td>\n        <td>Whether to use css animations or fallback javascript animations</td>\n      </tr>\n      <tr>\n        <td>duration</td>\n        <td>300</td>\n        <td>Duration of side bar animation</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <h3 class="ui header">\n    DOM Settings\n    <div class="sub header">DOM settings specify how this module should interface with the DOM</div>\n  </h3>\n  <table class="ui celled purple definition table segment">\n    <thead>\n      <th>Setting</th>\n      <th class="six wide">Default</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>namespace</td>\n        <td>tab</td>\n        <td>Event namespace. Makes sure module teardown does not effect other events attached to an element.</td>\n      </tr>\n      <tr>\n        <td>className</td>\n        <td>\n          <div class="code">\n    className: {\n      active : \'active\',\n      pushed : \'pushed\',\n      top    : \'top\',\n      left   : \'left\',\n      right  : \'right\',\n      bottom : \'bottom\'\n    }\n          </div>\n        </td>\n        <td>Class names used to attach style to state</td>\n      </tr>\n    </tbody>\n  </table>\n\n  <div class="ui horizontal divider"><i class="icon setting"></i></div>\n\n  <h3 class="ui header">\n    Debug Settings\n    <div class="sub header">Debug settings controls debug output to the console</div>\n  </h3>\n\n  <table class="ui blue celled sortable definition table segment">\n    <thead>\n      <th>Setting</th>\n      <th class="four wide">Default</th>\n      <th>Description</th>\n    </thead>\n    <tbody>\n      <tr>\n        <td>name</td>\n        <td>Tab</td>\n        <td>Name used in debug logs</td>\n      </tr>\n      <tr>\n        <td>debug</td>\n        <td>True</td>\n        <td>Provides standard debug output to console</td>\n      </tr>\n      <tr>\n        <td>performance</td>\n        <td>True</td>\n        <td>Provides standard debug output to console</td>\n      </tr>\n      <tr>\n        <td>verbose</td>\n        <td>True</td>\n        <td>Provides ancillary debug output to console</td>\n      </tr>\n      <tr>\n        <td>errors</td>\n        <td colspan="2">\n          <div class="code">\n    error   : {\n      method   : \'The method you called is not defined.\',\n      notFound : \'There were no elements that matched the specified selector\'\n    }\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n\n</div>');
      
      }).call(this);
      
    }).call(__obj);
    __obj.safe = __objSafe, __obj.escape = __escape;
    return __out.join('');
  };
}).call(this);
